#!/usr/bin/env node
'use strict';

/**
 *  Usage: pinwheel [options]
 *
 *  A highly opinionated fork of the Ranvier MUD engine.
 *
 *  Options:
 *
 *  -V, --version                     output the version number
 *  -s, --save [time]                 seconds between auto-save ticks (default: 10)
 *  -t, --telnetport [portNumber]     port to host the telnet server (default: 4000)
 *  -w, --websocketport [portNumber]  port to host the WebSocket server (default: 4001)
 *  -h, --httpport [portNumber]       port to host the HTTP web server (default: 80)
 *  -o, --httpsport [portNumber]      port to host the HTTPS web server (default: 443)
 *  -e, --entitytick [seconds]        miliseconds between entity ticks (default: 500)
 *  -p, --playertick [seconds]        miliseconds between player ticks (default: 500)
 *  -l, --loglevel [level]            log level (or none) (default: verbose)
 *  --no-prettyerrors                 use unformatted error stack traces
 *  -h, --help                        output usage information
 * 
 */

const semver = require('semver');
const commander = require('commander');
const chalk = require('chalk');

// load `package.json` for versioning
const pkg = require('./package.json');

// check if environment supports required node version
if (!semver.satisfies(process.version, pkg.engines.node)) {
  throw new Error(
    `Pinwheel requires Node.js version ${pkg.engines.node},
    you are currently running Node.js version ${process.version}.`
  );
}

// load managers and factories
const AccountManager = require('./src/AccountManager');
const AreaManager = require('./src/AreaManager');
const AspectManager = require('./src/AspectManager');
const BehaviorManager = require('./src/BehaviorManager');
const ChannelManager = require('./src/ChannelManager');
const CommandManager = require('./src/CommandManager');
const EffectFactory = require('./src/EffectFactory');
const EventManager = require('./src/EventManager');
const GameServer = require('./src/GameServer');
const HelpManager = require('./src/HelpManager');
const ItemFactory = require('./src/ItemFactory');
const ItemManager = require('./src/ItemManager');
const NpcFactory = require('./src/NpcFactory');
const NpcManager = require('./src/NpcManager');
const PartyManager = require('./src/PartyManager');
const PlayerManager = require('./src/PlayerManager');
const QuestFactory = require('./src/QuestFactory');
const QuestPartManager = require('./src/QuestPartManager');
const RoomManager = require('./src/RoomManager');
const SkillManager = require('./src/SkillManager');

// wrapper for `pinwheel.json`
const Config = require('./src/Config');

// declare timestamp for log
const now = new Date().toLocaleDateString('en-US', {  
	day : 'numeric',
	month : 'short',
  year : 'numeric',
  hour : 'numeric',
  minute : 'numeric'
});

const webConfig = Config.get('web');

// parse command arguments
commander
  .version(pkg.version)
  .description('A highly opinionated fork of the Ranvier MUD engine.')
  .option('-s, --save [time]', 'seconds between auto-save ticks', 10)
  .option('--no-grapevine', 'launch server without Grapevine (useful for development)')
  .option('-t, --telnetport [portNumber]', 'port to host the telnet server', Config.get('telnetPort', 4000))
  .option('-w, --websocketport [portNumber]', 'port to host the WebSocket server', Config.get('webSocketPort', 4000))
  .option('-h, --httpport [portNumber]', 'port to host the HTTP web server', webConfig.port)
  .option('-o, --httpsport [portNumber]', 'port to host the HTTPS web server', webConfig.https.port)
  .option('-e, --entitytick [seconds]', 'miliseconds between entity ticks', Config.get('entityTick', 500))
  .option('-p, --playertick [seconds]', 'miliseconds between player ticks', Config.get('playerTick', 500))
  .option('-l, --loglevel [level]', 'log level (or none)', Config.get('logLevel', 'verbose'))
  .option('--no-prettyerrors', 'use unformatted error stack traces')
  .parse(process.argv);

// set debug variable and encoding.
// TIP: 'net' by default to help find possible server errors
process.env.NODE_DEBUG = 'net';
process.stdin.setEncoding('utf8');

// prepare for logging
const Logger = require('./src/Logger');
let logLevel = commander.loglevel;
if (commander.loglevel !== 'none') {
  Logger.setFileLogging(now + '.log');
} else {
  logLevel = 'verbose';
}

// prettify console errors
if (commander.prettyerrors) {
  Logger.enablePrettyErrors();
}

// set logging level
Logger.setLevel(logLevel);

// initialize global state object and intervals
let GameState = {};
let saveInterval, tickInterval, playerTickInterval;

/**
 * Initialize a Pinwheel server
 * @param {boolean} restartServer
 */
function init(restartServer = true) {
  Logger.log(`${chalk.green.bold('===')} ${chalk.blue.bold('INITIALIZING PINWHEEL')} ${chalk.green.bold('===')}`);

  GameState = {
    AbilityManager: new SkillManager(),
    AccountManager: new AccountManager(),
    ArchetypeManager: new AspectManager(),
    AreaManager: new AreaManager(),
    AreaBehaviorManager: new BehaviorManager(),
    ChannelManager: new ChannelManager(),
    CommandManager: new CommandManager(),
    Config,
    DisciplineManager: new SkillManager(),
    EffectFactory: new EffectFactory(),
    HelpManager: new HelpManager(),
    InputEventManager: new EventManager(),
    ItemBehaviorManager: new BehaviorManager(),
    ItemFactory: new ItemFactory(),
    ItemManager: new ItemManager(),
    NpcBehaviorManager: new BehaviorManager(),
    NpcFactory: new NpcFactory(),
    NpcManager: new NpcManager(),
    PartyManager: new PartyManager(),
    PlayerManager: new PlayerManager(),
    QuestFactory: new QuestFactory(),
    QuestGoalManager: new QuestPartManager(),
    QuestRewardManager: new QuestPartManager(),
    RoomBehaviorManager: new BehaviorManager(),
    RoomManager: new RoomManager(),
    SpeciesManager: new AspectManager(),
    SpellManager: new SkillManager(),
    ServerEventManager: new EventManager(),
    TraitManager: new AspectManager(),
    GameServer: new GameServer(),
  };

  // initialize bundles
  const BundleManager = new (require('./src/BundleManager'))(GameState);
  GameState.BundleManager = BundleManager;
  BundleManager.loadBundles();
  GameState.ServerEventManager.attach(GameState.GameServer);

  // if restarting the server
  // TODO: implement warmbooting
  if (restartServer) {
    Logger.log(`${chalk.green.bold('===')} ${chalk.blue.bold('STARTING SERVERS')} ${chalk.green.bold('===')}`);
    GameState.GameServer.startup(commander);

    // configure saving interval for persistence
    Logger.log(`Setting saving interval to ${chalk.green.bold(commander.save)} seconds.`);
    clearInterval(saveInterval);
    saveInterval = setInterval(() => {
      GameState.PlayerManager.saveAll();
      GameState.AreaManager.saveAll();
    }, commander.save * 1000);

    // configure intervals for all non-player entities
    Logger.log(`Setting entity tick interval to ${chalk.green.bold(commander.entitytick)} milliseconds.`);
    clearInterval(tickInterval);
    tickInterval = setInterval(() => {
      GameState.AreaManager.tickAll(GameState);
      GameState.ItemManager.tickAll();
    }, commander.entityTick);

    // configure player intervals
    Logger.log(`Setting player tick interval to ${chalk.green.bold(commander.playertick)} milliseconds.`);
    clearInterval(playerTickInterval);
    playerTickInterval = setInterval(() => {
      GameState.PlayerManager.emit('updateTick');
    }, commander.playerTick);
  }
}

// start Pinwheel
init();
